#Mini Project Week 8 RiceRocks
# The original script was completed with Python 2.7 on CodeSkulptor, which can be accessed via the link below.
#http://www.codeskulptor.org/#user45_fNLpbqFTrv_19.py


import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
angle_vel_int = 0.05
started = False


class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def process_sprite_group(group, canvas):
    for s in set(group):
        s.draw(canvas)
        if s.update():
            group.remove(s)                    
        

def group_collide(group, other_object):
    global explosion_group
    
    for s in set(group):
        if s.collide(other_object):
            group.remove(s)
            a_explosion = Sprite(s.get_position(), [0, 0], 0, 0, explosion_image, 
                                 explosion_info, explosion_sound)
            explosion_group.add(a_explosion)
            return True    

def group_group_collide(group1, group2):
    group1_collision = 0
    for m in set(group1):
        if group_collide(group2, m):
            group1.remove(m)
            group1_collision += 1
    return group1_collision
            
        
        
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            thrust_center = [self.image_center[0] + self.image_size[0], self.image_center[1]]
            canvas.draw_image(self.image, thrust_center, self.image_size,
                          self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                          self.pos, self.image_size, self.angle)
            

    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def update(self):
        self.angle += self.angle_vel
        
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        vel_friction = 0.02
        ac_friction = 0.2
        
        self.vel[0] = (1 - vel_friction) * self.vel[0]
        self.vel[1] = (1 - vel_friction) * self.vel[1]
        
        if self.thrust:     
            self.vel[0] += angle_to_vector(self.angle)[0] * ac_friction
            self.vel[1] += angle_to_vector(self.angle)[1] * ac_friction 
        
        
    def increase_angle_vel(self):
        self.angle_vel += angle_vel_int
    
    def decrease_angle_vel(self):
        self.angle_vel -= angle_vel_int
    
    def thruster_on(self):
        self.thrust = True
        ship_thrust_sound.rewind()
        ship_thrust_sound.play()
    
    def thruster_off(self):
        self.thrust = False
        ship_thrust_sound.pause()
    
    def shoot(self):
        global missile_group
        
        missile_pos = [self.pos[0] + self.radius * angle_to_vector(self.angle)[0],
                       self.pos[1] + self.radius * angle_to_vector(self.angle)[1]]
        missile_vel = [self.vel[0] + angle_to_vector(self.angle)[0] * 5, 
                           self.vel[1] + angle_to_vector(self.angle)[1] * 5]
        a_missile = Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound)
        
        missile_group.add(a_missile)
            
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
    
    def get_position(self):
        return self.pos 
    
    def get_radius(self):
        return self.radius
    
    def draw(self, canvas):
        explosion_center = list(self.image_center)
        if self.animated:

            current_explosion_index = (time % 20) // 1
            explosion_center = [(current_explosion_index + 0.5) * self.image_size[0], self.image_center[1]]
            
            #another way to draw the explosion image
            #explosion_center = [self.image_center[0] + self.age * self.image_size[0], self.image_center[1]]
        canvas.draw_image(self.image, explosion_center, self.image_size, self.pos, self.image_size, self.angle)
        
    def update(self):
# sprints do not have acceleration or friction
        
        self.angle += self.angle_vel
                
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.age += 1
        
        return self.age >= self.lifespan
  
    def collide(self, other_object):
        return dist(self.pos, other_object.get_position()) <= self.radius + other_object.get_radius()

# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started, score, lives
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        score = 0
        lives = 3
        timer.start()
        soundtrack.rewind()
        soundtrack.play()

# define key handlers

def key_down(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.decrease_angle_vel()
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.increase_angle_vel()
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thruster_on()
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()


def key_up(key):
    global angle_vel
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thruster_off()        

        
def draw(canvas):
    global time, lives, score, started, rock_group
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)
    my_ship.update()
    
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    
    # update the lives by collision
    if group_collide(rock_group, my_ship):
        lives -= 1
    score += group_group_collide(missile_group, rock_group)
    
    # reset the game
    if lives == 0:
        started = False
        rock_group = set([])
        soundtrack.pause()
    
    # draw lives and scores
    canvas.draw_text("LIVES: " + str(lives), [WIDTH * 0.05, 30], 30, "Red")
    canvas.draw_text("SCORE: " + str(score), [WIDTH * 0.8, 30], 30, "Red")
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
            
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    if not started or len(rock_group) > 12:
        pass
    #  pos, vel, ang, ang_vel, image, info
    rock_pos = [random.randrange(WIDTH), random.randrange(HEIGHT)]
    rock_vel = [random.choice([-1, 1]) * random.random() * 0.2, random.choice([-1, 1]) * random.random() * 0.2]
    # vary the velocity of rocks based on the score to make game play more difficult as the game progresses.
    rock_vel[0] += score * 0.03
    rock_vel[1] += score * 0.03
        
    rock_angle = random.randrange(-3, 3) * random.random()
    rock_angle_vel = random.randrange(-1, 2) * random.random() * 0.05
        
        # if the rock is generated too close to the ship, generate a new one
    while dist(rock_pos, my_ship.get_position()) <= 100:
        rock_pos = [random.randrange(WIDTH), random.randrange(HEIGHT)]
            
    a_rock = Sprite(rock_pos, rock_vel, rock_angle, rock_angle_vel, asteroid_image, asteroid_info)    
    rock_group.add(a_rock)
        

# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_group = set([])
missile_group = set([])
explosion_group = set([])

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(key_down)
frame.set_keyup_handler(key_up)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
