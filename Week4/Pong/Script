# The original script was completed with Python 2.7 on CodeSkulptor
# CodeSkulpter address http://www.codeskulptor.org/#user45_hBSnfDLDtP_0.py
# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_vel = [0, 0]
paddle1_pos = HEIGHT / 2
paddle2_pos = HEIGHT / 2
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0
    
    
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    # generate random velocity for the ball
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if direction == RIGHT:
        ball_vel[0] = random.randrange(120, 240) / 60
    elif direction == LEFT:
        ball_vel[0] = -random.randrange(120, 240) / 60
        
    ball_vel[1] = -random.randrange(60, 180) / 60
        
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, score1, score2  # these are numbers
    global score1, score2  # these are ints
    
    paddle1_pos = HEIGHT / 2
    paddle2_pos = HEIGHT / 2
    
    paddle1_vel = 0
    paddle2_vel = 0
    
    score1 = 0
    score2 = 0
    
    spawn_ball(LEFT)
    
def draw(canvas):
    global score1, score2
    global paddle1_pos, paddle2_pos
    global paddle1_vel, paddle2_vel, ball_pos, ball_vel
 
        
    # draw mid line
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    
    # draw gutters
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    # bounce from borders
    # top border
    if ball_pos[1] < BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    # bottom border
    elif HEIGHT - ball_pos[1] < BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    # left vertical border
    if ball_pos[0] - PAD_WIDTH < BALL_RADIUS:
        if paddle1_pos - PAD_HEIGHT / 2 <= ball_pos[1] <= paddle1_pos + PAD_HEIGHT / 2:
            ball_vel[0] = - 1.1 * ball_vel[0]
            
        else:
            # Player2 gets a point
            score2 += 1
            spawn_ball(RIGHT)
                  
    # right vertical border
    elif (WIDTH - PAD_WIDTH - ball_pos[0]) < BALL_RADIUS:
        if paddle2_pos - PAD_HEIGHT / 2 <= ball_pos[1] <= paddle2_pos + PAD_HEIGHT / 2:
            ball_vel[0] = - 1.1 * ball_vel[0]
          
        else:        
            # Player1 gets a score
            score1 += 1
            spawn_ball(LEFT)
            
             
    
    # draw ball 
    ball_pos = [ball_pos[0] + ball_vel[0], ball_pos[1] + ball_vel[1]]
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen 
    if paddle1_pos <= PAD_HEIGHT / 2:
        paddle1_pos = PAD_HEIGHT / 2
    elif paddle1_pos >= HEIGHT - PAD_HEIGHT / 2:
        paddle1_pos = HEIGHT - PAD_HEIGHT / 2
    else:
        paddle1_pos += paddle1_vel
     
    if paddle2_pos <= PAD_HEIGHT / 2:
        paddle2_pos = PAD_HEIGHT / 2
    elif paddle2_pos >= HEIGHT - PAD_HEIGHT / 2:
        paddle2_pos = HEIGHT - PAD_HEIGHT / 2
    else:
        paddle2_pos += paddle2_vel
        
    
    
    # draw paddles  
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    canvas.draw_polygon([[0, paddle1_pos - PAD_HEIGHT / 2], 
                        [0, paddle1_pos + PAD_HEIGHT / 2], 
                        [PAD_WIDTH, paddle1_pos - PAD_HEIGHT / 2], 
                        [PAD_WIDTH, paddle1_pos + PAD_HEIGHT / 2]], 2, "White", "White")
    
    canvas.draw_polygon([[WIDTH - PAD_WIDTH, paddle2_pos - PAD_HEIGHT / 2], 
                        [WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT / 2],
                        [WIDTH, paddle2_pos - PAD_HEIGHT / 2], 
                        [WIDTH, paddle2_pos + PAD_HEIGHT / 2]], 2, "White", "White")
    
    # draw scores
    canvas.draw_text(str(score1), [50, 70], 30, "White")
    canvas.draw_text(str(score2), [550, 70], 30, "White")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 5
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5
                            
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background("Black")
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# Add a "Restart" button
frame.add_button("Restart", new_game, 100)


# start frame
new_game()
frame.start()



